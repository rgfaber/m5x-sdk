using Newtonsoft.Json;

namespace M5x.Consul.PreparedQuery
{
    /// <summary>
    ///     PrepatedQueryDefinition defines a complete prepared query.
    /// </summary>
    public class PreparedQueryDefinition
    {
        /// <summary>
        ///     ID is this UUID-based ID for the query, always generated by Consul.
        /// </summary>
        public string ID { get; set; }

        /// <summary>
        ///     Name is an optional friendly name for the query supplied by the
        ///     user. NOTE - if this feature is used then it will reduce the security
        ///     of any read ACL associated with this query/service since this name
        ///     can be used to locate nodes with supplying any ACL.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     Session is an optional session to tie this query's lifetime to. If
        ///     this is omitted then the query will not expire.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public string Session { get; set; }

        /// <summary>
        ///     Token is the ACL token used when the query was created, and it is
        ///     used when a query is subsequently executed. This token, or a token
        ///     with management privileges, must be used to change the query later.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        ///     Service defines a service query (leaving things open for other types
        ///     later).
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public ServiceQuery Service { get; set; }

        /// <summary>
        ///     DNS has options that control how the results of this query are
        ///     served over DNS.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public QueryDnsOptions Dns { get; set; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
        public QueryTemplate Template { get; set; }
    }
}